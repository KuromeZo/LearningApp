@page "/exercise/{ExerciseId:int}"
@using LearningApp.Core.Models
@using LearningApp.Web.Services
@using LearningApp.API.DTOs
@inject ApiService ApiService

<div class="container-fluid">
    @if (exercise == null)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Загрузка...</span>
            </div>
            <p class="mt-2">Загружаем упражнение с ID: @ExerciseId</p>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-12">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/">Главная</a></li>
                        <li class="breadcrumb-item"><a href="/topic/@exercise.TopicId">@exercise.Topic.Name</a></li>
                        <li class="breadcrumb-item active">@exercise.Title</li>
                    </ol>
                </nav>

                <div class="d-flex justify-content-between align-items-center mb-4">
                    <div>
                        <h1>💻 @exercise.Title</h1>
                        <p class="text-muted mb-0">Тема: @exercise.Topic.Name</p>
                    </div>
                    <span class="badge bg-info fs-6">Сложность: @exercise.Difficulty</span>
                </div>

                <!-- Debug Info -->
                @if (!string.IsNullOrEmpty(debugMessage))
                {
                    <div class="alert alert-info">
                        <strong>Debug:</strong> @debugMessage
                    </div>
                }

                <div class="row">
                    <div class="col-lg-6 mb-4">
                        <div class="card h-100">
                            <div class="card-header">
                                <h5 class="mb-0">📋 Условие задачи</h5>
                            </div>
                            <div class="card-body">
                                <p>@exercise.Description</p>
                                
                                @if (!string.IsNullOrEmpty(exercise.ExpectedOutput))
                                {
                                    <div class="alert alert-info">
                                        <strong>Ожидаемый вывод:</strong><br>
                                        <code>@exercise.ExpectedOutput</code>
                                    </div>
                                }

                                @if (showHint && !string.IsNullOrEmpty(exercise.Solution))
                                {
                                    <div class="alert alert-warning">
                                        <strong>💡 Подсказка:</strong><br>
                                        <small>Попробуйте использовать: <code>@GetHint()</code></small>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="col-lg-6">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0">⌨️ Ваш код</h5>
                            </div>
                            <div class="card-body">
                                <div class="form-group mb-3">
                                    <textarea @bind="userCode" 
                                              class="form-control font-monospace" 
                                              rows="12" 
                                              placeholder="@GetPlaceholder()"></textarea>
                                </div>

                                <div class="d-flex gap-2 mb-3">
                                    <button class="btn btn-success" @onclick="CheckSolution" disabled="@isChecking">
                                        @if (isChecking)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2"></span>
                                        }
                                        🔍 Проверить
                                    </button>
                                    
                                    <button class="btn btn-secondary" @onclick="ResetCode">
                                        🔄 Сброс
                                    </button>
                                    
                                    <button class="btn btn-warning" @onclick="ShowHint">
                                        💡 Подсказка
                                    </button>

                                    <button class="btn btn-info btn-sm" @onclick="TestButtons">
                                        🧪 Тест
                                    </button>
                                </div>

                                @if (result != null)
                                {
                                    <div class="alert @(result.IsCorrect ? "alert-success" : "alert-danger")" role="alert">
                                        <div class="d-flex align-items-center">
                                            <span class="me-2">@(result.IsCorrect ? "✅" : "❌")</span>
                                            <strong>@result.Message</strong>
                                        </div>
                                        
                                        @if (result.IsCorrect)
                                        {
                                            <hr>
                                            <div class="d-flex justify-content-between align-items-center mb-0">
                                                <span>Отличная работа! 🎉</span>
                                                <a href="/topic/@exercise.TopicId" class="btn btn-primary btn-sm">
                                                    Вернуться к теме
                                                </a>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int ExerciseId { get; set; }
    
    private Exercise? exercise;
    private string userCode = "";
    private ExerciseResult? result;
    private bool isChecking = false;
    private bool showHint = false;
    private string debugMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            debugMessage = $"Загружаем упражнение с ID: {ExerciseId}";
            exercise = await ApiService.GetExerciseAsync(ExerciseId);
            
            if (exercise == null)
            {
                debugMessage = "Упражнение не найдено!";
            }
            else
            {
                debugMessage = $"Упражнение загружено: {exercise.Title}";
                if (!string.IsNullOrEmpty(exercise.StarterCode))
                {
                    userCode = exercise.StarterCode;
                }
            }
        }
        catch (Exception ex)
        {
            debugMessage = $"Ошибка загрузки: {ex.Message}";
        }
    }

    private async Task CheckSolution()
    {
        debugMessage = "Начинаем проверку решения...";
        
        if (string.IsNullOrWhiteSpace(userCode)) 
        {
            debugMessage = "Код пустой!";
            return;
        }
        
        isChecking = true;
        result = null;
        StateHasChanged();

        try
        {
            debugMessage = "Отправляем код на проверку...";
            result = await ApiService.SubmitSolutionAsync(ExerciseId, userCode);
            debugMessage = $"Результат получен: {result.Message}";
        }
        catch (Exception ex)
        {
            debugMessage = $"Ошибка проверки: {ex.Message}";
            result = new ExerciseResult 
            { 
                IsCorrect = false, 
                Message = "Ошибка при проверке решения. Попробуйте ещё раз." 
            };
        }
        finally
        {
            isChecking = false;
            StateHasChanged();
        }
    }

    private void ResetCode()
    {
        debugMessage = "Сброс кода...";
        userCode = exercise?.StarterCode ?? "";
        result = null;
        showHint = false;
        StateHasChanged();
    }

    private void ShowHint()
    {
        debugMessage = "Показываем подсказку...";
        showHint = true;
        StateHasChanged();
    }

    private void TestButtons()
    {
        debugMessage = $"Тест кнопок - время: {DateTime.Now:HH:mm:ss}";
        StateHasChanged();
    }

    private string GetHint()
    {
        if (exercise?.Solution == null) return "";
        
        var solution = exercise.Solution.Trim();
        if (solution.Length > 10)
        {
            return solution.Substring(0, 10) + "...";
        }
        return solution;
    }

    private string GetPlaceholder()
    {
        return @"// Напишите ваш код здесь...
#include <iostream>
using namespace std;

int main() {
    // ваш код
    return 0;
}";
    }
}