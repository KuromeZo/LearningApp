@page "/exercise/{ExerciseId:int}"
@inject ApiService ApiService
@rendermode InteractiveServer

<div class="container-fluid">
    @if (exercise == null)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Загрузка...</span>
            </div>
            <p class="mt-2">Загружаем упражнение с ID: @ExerciseId</p>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-12">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/">Главная</a></li>
                        <li class="breadcrumb-item"><a href="/topic/@exercise.TopicId">@exercise.Topic.Name</a></li>
                        <li class="breadcrumb-item active">@exercise.Title</li>
                    </ol>
                </nav>

                <div class="d-flex justify-content-between align-items-center mb-4">
                    <div>
                        <h1>💻 @exercise.Title</h1>
                        <p class="text-muted mb-0">Тема: @exercise.Topic.Name</p>
                    </div>
                    <div class="d-flex align-items-center gap-3">
                        <span class="badge bg-info fs-6">Сложность: @exercise.Difficulty</span>
                        @if (result != null && result.Score > 0)
                        {
                            <span class="badge @GetScoreBadgeClass(result.Score) fs-6">
                                🤖 Оценка ИИ: @result.Score/100
                            </span>
                        }
                    </div>
                </div>

                <div class="row">
                    <div class="col-lg-6 mb-4">
                        <div class="card h-100">
                            <div class="card-header">
                                <h5 class="mb-0">📋 Условие задачи</h5>
                            </div>
                            <div class="card-body">
                                <p>@exercise.Description</p>
                                
                                @if (!string.IsNullOrEmpty(exercise.ExpectedOutput))
                                {
                                    <div class="alert alert-info">
                                        <strong>Ожидаемый вывод:</strong><br>
                                        <code>@exercise.ExpectedOutput</code>
                                    </div>
                                }

                                @if (!string.IsNullOrEmpty(aiHint))
                                {
                                    <div class="alert alert-warning">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <div>
                                                <strong>🤖 ИИ Подсказка:</strong><br>
                                                <small>@aiHint</small>
                                            </div>
                                            <button type="button" class="btn-close btn-sm" @onclick="ClearHint"></button>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="col-lg-6">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0">⌨️ Ваш код</h5>
                            </div>
                            <div class="card-body">
                                <div class="form-group mb-3">
                                    <textarea @bind="userCode" 
                                              @bind:event="oninput"
                                              class="form-control font-monospace" 
                                              rows="12" 
                                              placeholder="@GetPlaceholder()"></textarea>
                                </div>

                                <div class="d-flex gap-2 mb-3 flex-wrap">
                                    <button type="button" class="btn btn-success" @onclick="CheckSolution" disabled="@isChecking">
                                        @if (isChecking)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2"></span>
                                        }
                                        🤖 Проверить с ИИ
                                    </button>
                                    
                                    <button type="button" class="btn btn-secondary" @onclick="ResetCode">
                                        🔄 Сброс
                                    </button>
                                    
                                    <button type="button" class="btn btn-warning" @onclick="GetAIHint" disabled="@isGettingHint">
                                        @if (isGettingHint)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2"></span>
                                        }
                                        💡 ИИ Подсказка
                                    </button>
                                </div>

                                @if (result != null)
                                {
                                    <div class="card mb-3">
                                        <div class="card-header @(result.IsCorrect ? "bg-success text-white" : "bg-danger text-white")">
                                            <div class="d-flex align-items-center justify-content-between">
                                                <span>@(result.IsCorrect ? "✅ Правильно!" : "❌ Требуется доработка")</span>
                                                <span class="badge bg-light text-dark">🤖 @result.Score/100</span>
                                            </div>
                                        </div>
                                        <div class="card-body">
                                            <p class="mb-2"><strong>ИИ обратная связь:</strong></p>
                                            <p>@result.Message</p>

                                            @if (result.Suggestions?.Any() == true)
                                            {
                                                <hr>
                                                <p class="mb-2"><strong>💡 ИИ рекомендации:</strong></p>
                                                <ul class="mb-0">
                                                    @foreach (var suggestion in result.Suggestions)
                                                    {
                                                        <li>@suggestion</li>
                                                    }
                                                </ul>
                                            }

                                            @if (result.IsCorrect)
                                            {
                                                <hr>
                                                <div class="d-flex justify-content-between align-items-center mb-0">
                                                    <span>Отличная работа! 🎉</span>
                                                    <a href="/topic/@exercise.TopicId" class="btn btn-primary btn-sm">
                                                        Вернуться к теме
                                                    </a>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int ExerciseId { get; set; }
    
    private Exercise? exercise;
    private string userCode = "";
    private ExerciseResult? result;
    private bool isChecking = false;
    private bool isGettingHint = false;
    private string aiHint = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            exercise = await ApiService.GetExerciseAsync(ExerciseId);
            
            if (exercise != null && !string.IsNullOrEmpty(exercise.StarterCode))
            {
                userCode = exercise.StarterCode;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка загрузки: {ex.Message}");
        }
    }

    private async Task CheckSolution()
    {
        if (string.IsNullOrWhiteSpace(userCode)) return;
        
        isChecking = true;
        result = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            result = await ApiService.SubmitSolutionAsync(ExerciseId, userCode);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка проверки: {ex.Message}");
            result = new ExerciseResult 
            { 
                IsCorrect = false, 
                Message = "Ошибка при анализе решения. Попробуйте ещё раз.",
                Score = 0
            };
        }
        finally
        {
            isChecking = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task GetAIHint()
    {
        if (string.IsNullOrWhiteSpace(userCode))
        {
            aiHint = "Сначала напишите немного кода, чтобы получить персонализированную подсказку!";
            await InvokeAsync(StateHasChanged);
            return;
        }

        isGettingHint = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            aiHint = await ApiService.GetHintAsync(ExerciseId, userCode);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка подсказки: {ex.Message}");
            aiHint = "Не удалось получить подсказку. Попробуйте проверить синтаксис и логику кода.";
        }
        finally
        {
            isGettingHint = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ResetCode()
    {
        userCode = exercise?.StarterCode ?? "";
        result = null;
        aiHint = "";
        await InvokeAsync(StateHasChanged);
    }

    private async Task ClearHint()
    {
        aiHint = "";
        await InvokeAsync(StateHasChanged);
    }

    private string GetScoreBadgeClass(int score)
    {
        return score switch
        {
            >= 90 => "bg-success",
            >= 70 => "bg-warning",
            >= 50 => "bg-info",
            _ => "bg-danger"
        };
    }

    private string GetPlaceholder()
    {
        return @"// Напишите ваш код здесь...
#include <iostream>
using namespace std;

int main() {
    // ваш код
    return 0;
}";
    }
}